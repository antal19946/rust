use crate::cache::ReserveCache;
use crate::config::Config;
use crate::mempool_decoder::{ArbitrageOpportunity, DecodedSwap};
// use crate::price_tracker::find_arbitrage_opportunity_from_price_tracker;
use crate::route_cache::RoutePath;
use crate::simulate_swap_path::{simulate_buy_path_amounts_array, simulate_sell_path_amounts_array};
use crate::split_route_path::split_route_around_token_x;
use crate::token_index::TokenIndexMap;
use crate::token_tax::TokenTaxMap;
use chrono::{DateTime, Utc};
use dashmap::DashMap;
use ethers::types::H160;
use ethers::types::H256;
use primitive_types::U256;
use revm::database::states::state;
use serde_json::json;
use std::fs::OpenOptions;
use std::io::Write;
use std::sync::Arc;
use std::time::Instant;
use tokio::io::{AsyncBufReadExt, BufReader};
use tokio::net::UnixStream;
use rayon::prelude::*;
use ethers::types::I256;
/// Spawns a background task that listens for DEX events on /tmp/mempool_decoder.sock and updates ReserveCache for SyncV2 events.
pub async  fn spawn_ipc_event_listener_with_cache(
    reserve_cache: Arc<ReserveCache>,
    token_index: Arc<TokenIndexMap>,
    precomputed_route_cache: Arc<DashMap<u32, Vec<RoutePath>>>,
    token_tax_map: Arc<TokenTaxMap>,
    config: Config,
    opportunity_tx: tokio::sync::mpsc::Sender<ArbitrageOpportunity>,
) {
    tokio::spawn(async move {
        let path = "/tmp/mempool_decoder.sock";
        loop {
            match UnixStream::connect(path).await {
                Ok(stream) => {
                    println!("[IPC LISTENER] Connected to {}", path);
                    let reader = BufReader::new(stream);
                    let mut lines = reader.lines();
                    while let Some(line_result) = lines.next_line().await.transpose() {
                        match line_result {
                            Ok(line) => {
                                if line.trim().is_empty() {
                                    continue;
                                }
                                if let Ok(event) = serde_json::from_str::<serde_json::Value>(&line) {
                                    match event["event_type"].as_str() {
                                        Some("SyncV2") => {
                                            if let Some((address, reserve0, reserve1, tx_hash)) =
                                                parse_sync_v2_event(&event)
                                            {
                                                if let Err(e) = update_reserve_cache_sync_v2(
                                                    &reserve_cache,
                                                    address,
                                                    reserve0,
                                                    reserve1,
                                                    tx_hash,
                                                    &token_index,
                                                    &precomputed_route_cache,
                                                    &token_tax_map,
                                                    &config,
                                                    &opportunity_tx,
                                                ).await {
                                                    eprintln!("[IPC LISTENER] Error updating reserve cache: {}", e);
                                                }
                                            }
                                        }
                                        Some("SwapV3") | Some("PancakeSwapV3") => {
                                            // println!("[IPC] Received SwapV3 event: {:?}", event);
                                            if let Some((address, sqrt_price_x96, liquidity, tick)) =
                                                parse_swap_v3_event(&event)
                                            {
                                                println!(
                                                    "[IPC] Received SwapV3 event for pool: {:?}",
                                                    address
                                                );
                                                println!(
                                                    "[IPC] sqrt_price_x96: {}, liquidity: {}, tick: {}",
                                                    sqrt_price_x96, liquidity, tick
                                                );
                                                // Update the reserve cache with the new V3 pool
                                                update_reserve_cache_swap_v3(
                                                    &reserve_cache,
                                                    address,
                                                    sqrt_price_x96,
                                                    liquidity,
                                                    tick,
                                                    None, // amount0
                                                    None, // amount1
                                                    None, // token0
                                                    None, // token1
                                                    &token_index,
                                                    &precomputed_route_cache,
                                                    &token_tax_map,
                                                    &config,
                                                    &opportunity_tx,
                                                );
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            Err(e) => {
                                println!("[IPC LISTENER] Error reading from socket: {e}. Reconnecting...");
                                break; // Break inner loop to reconnect
                            }
                        }
                    }
                    println!("[IPC LISTENER] Disconnected from socket. Reconnecting in 1s...");
                }
                Err(e) => {
                    println!("[IPC LISTENER] Failed to connect to {}: {e}. Retrying in 1s...", path);
                }
            }
            tokio::time::sleep(std::time::Duration::from_secs(1)).await;
        }
    });
}

fn parse_sync_v2_event(event: &serde_json::Value) -> Option<(H160, U256, U256, H256)> {
    let addr_str = event["address"].as_str()?;
    let res0_str = event["reserve0"].as_str()?;
    let res1_str = event["reserve1"].as_str()?;
    let tx_hash_str = event["tx_hash"].as_str()?;
    let address = H160::from_slice(&hex::decode(addr_str).ok()?);
    let reserve0 = U256::from_str_radix(res0_str.trim_start_matches("0x"), 16).ok()?;
    let reserve1 = U256::from_str_radix(res1_str.trim_start_matches("0x"), 16).ok()?;
    let tx_hash = H256::from_slice(&hex::decode(tx_hash_str).ok()?);
    Some((address, reserve0, reserve1, tx_hash))
}

async fn update_reserve_cache_sync_v2(
    reserve_cache: &Arc<ReserveCache>,
    pool: H160,
    new_reserve0: U256,
    new_reserve1: U256,
    tx_hash: H256,
    token_index: &Arc<TokenIndexMap>,
    precomputed_route_cache: &Arc<DashMap<u32, Vec<RoutePath>>>,
    token_tax_map: &Arc<TokenTaxMap>,
    config: &Config,
    opportunity_tx: &tokio::sync::mpsc::Sender<ArbitrageOpportunity>,
)-> anyhow::Result<()>  {
    let old_reserve0 = reserve_cache
        .get(&pool)
        .and_then(|s| s.reserve0)
        .unwrap_or(U256::zero());
    let old_reserve1 = reserve_cache
        .get(&pool)
        .and_then(|s| s.reserve1)
        .unwrap_or(U256::zero());

    // Print cache state BEFORE update
    println!("      [CACHE BEFORE] Pool: {:?}", pool);
    println!("      [CACHE BEFORE] Old reserve0: {}", old_reserve0);
    println!("      [CACHE BEFORE] Old reserve1: {}", old_reserve1);

    // --- Only hold the lock for the minimum time needed ---
    // if let Some(mut state) = reserve_cache.get_mut(&pool) {
    //     state.reserve0 = Some(new_reserve0);
    //     state.reserve1 = Some(new_reserve1);
    //     state.last_updated = chrono::Utc::now().timestamp() as u64;
    // }
    println!("      [hash====================================== UPDATE] : {:?}", tx_hash);
    let (token_x, token_x_amount) = if new_reserve0 < old_reserve0 {
        // token0 bought (reserve0 decreased)
        if let Some(pool_data) = reserve_cache.get(&pool) {
            (pool_data.token0, old_reserve0.saturating_sub(new_reserve0))
        } else {
            return Ok(());
        }
    } else if new_reserve1 < old_reserve1 {
        // token1 bought (reserve1 decreased)
        if let Some(pool_data) = reserve_cache.get(&pool) {
            (pool_data.token1, old_reserve1.saturating_sub(new_reserve1))
        } else {
            return Ok(());
        }
    } else {
        return Ok(());
    };
        // Create decoded swap for arbitrage detection
    let decoded_swap = DecodedSwap {
        tx_hash: H160::zero(), // Sync events don't have direct tx hash
        pool_address: pool,
        token_x,
        token_x_amount,
        block_number: 0,
        timestamp: chrono::Utc::now().timestamp() as u64,
    };
    println!(
        "[DEBUG] Decoded SyncV2 event: {:?}",
        decoded_swap
    );
      let t0 = Instant::now();
    let mut timings = serde_json::Map::new();
    timings.insert("search_start_us".to_string(), serde_json::json!(0));

    // --- Opportunity search (simulation/filtering) ---
    let after_sim;
    let before_tx;
    let after_tx;
    let mut tx_hash_str: Option<String> = None;
    // --- Drop the lock before spawning the async task ---
   if let Some((opportunity, latency_ms)) = find_arbitrage_opportunity_from_price_tracker(
        &decoded_swap,
        reserve_cache,
        token_index,
        precomputed_route_cache,
        token_tax_map,
        &config,
    )
    .await
    {
        after_sim = t0.elapsed().as_micros();
        timings.insert("after_sim_us".to_string(), serde_json::json!(after_sim));

        // Log the opportunity
        log_opportunity_from_price_tracker(
            &opportunity,
            latency_ms,
            reserve_cache,
            old_reserve0,
            old_reserve1,
        );

        // --- Before TX fire ---
        before_tx = t0.elapsed().as_micros();
        timings.insert("before_tx_us".to_string(), serde_json::json!(before_tx));

        // --- Simulate TX fire (mock, replace with actual call if needed) ---
        // let tx_hash = execute_arbitrage_onchain(...).await?;
        // For now, just simulate delay
        // tokio::time::sleep(tokio::time::Duration::from_millis(10)).await;
        // after_tx = t0.elapsed().as_micros();
        // timings.insert("after_tx_us".to_string(), serde_json::json!(after_tx));
        // timings.insert("tx_hash".to_string(), serde_json::json!(tx_hash.to_string()));

        // Send opportunity for execution
        if let Err(e) = opportunity_tx.send(opportunity).await {
            eprintln!(
                "❌ [Price Tracker] Failed to send arbitrage opportunity: {}",
                e
            );
        }
        after_tx = t0.elapsed().as_micros();
        timings.insert("after_tx_us".to_string(), serde_json::json!(after_tx));
        timings.insert("tx_hash".to_string(), serde_json::json!(tx_hash_str));

        // --- Total ---
        let total = t0.elapsed().as_millis();
        timings.insert("total_ms".to_string(), serde_json::json!(total));

        // Print and log timings
        // println!("[LATENCY] Step timings: {}", serde_json::to_string_pretty(&timings).unwrap());
        // Optionally, append to a timings log file
        if let Ok(mut file) = OpenOptions::new()
            .create(true)
            .append(true)
            .open("latency_breakdown_price_tracker.log")
        {
            if let Err(e) = writeln!(file, "{}", serde_json::to_string(&timings).unwrap()) {
                eprintln!("❌ [Price Tracker] Failed to write latency log: {}", e);
            }
        }
    }
    Ok(())
}

fn parse_swap_v3_event(event: &serde_json::Value) -> Option<(H160, U256, U256, i32)> {
    let addr_str = event["address"].as_str()?;
    let sqrt_str = event["sqrt_price_x96"].as_str()?;
    let liq_str = event["liquidity"].as_str()?;
    let tick_str = event["tick"].as_str()?;
    println!(
        "[DEBUG] parse_swap_v3_event: addr_str={:?}, sqrt_str={:?}, liq_str={:?}, tick_str={:?}",
        addr_str, sqrt_str, liq_str, tick_str
    );

    let address = match hex::decode(addr_str) {
        Ok(bytes) => H160::from_slice(&bytes),
        Err(e) => {
            println!("[DEBUG] address decode error: {}", e);
            return None;
        }
    };

    let sqrt_price_x96 = U256::from_dec_str(sqrt_str)
        .or_else(|_| U256::from_str_radix(sqrt_str.trim_start_matches("0x"), 16))
        .ok()?;
    let liquidity = U256::from_dec_str(liq_str)
        .or_else(|_| U256::from_str_radix(liq_str.trim_start_matches("0x"), 16))
        .ok()?;
    let tick = tick_str
        .parse::<i32>()
        .or_else(|_| i32::from_str_radix(tick_str.trim_start_matches("0x"), 16))
        .ok()?;

    println!(
        "[DEBUG] parse_swap_v3_event: address={:?}, sqrt_price_x96={}, liquidity={}, tick={}",
        address, sqrt_price_x96, liquidity, tick
    );
    Some((address, sqrt_price_x96, liquidity, tick))
}

fn update_reserve_cache_swap_v3(
    reserve_cache: &Arc<ReserveCache>,
    pool: H160,
    sqrt_price_x96: U256,
    liquidity: U256,
    tick: i32,
    amount0: Option<I256>,
    amount1: Option<I256>,
    token0: Option<H160>,
    token1: Option<H160>,
    token_index: &Arc<TokenIndexMap>,
    precomputed_route_cache: &Arc<DashMap<u32, Vec<RoutePath>>>,
    token_tax_map: &Arc<TokenTaxMap>,
    config: &Config,
    opportunity_tx: &tokio::sync::mpsc::Sender<ArbitrageOpportunity>,
) {
    // Update the V3 pool state (no lock held during await)
    // {
    //     if let Some(mut state) = reserve_cache.get_mut(&pool) {
    //         state.sqrt_price_x96 = Some(sqrt_price_x96);
    //         state.liquidity = Some(liquidity);
    //         state.tick = Some(tick);
    //         state.last_updated = chrono::Utc::now().timestamp() as u64;
    //     }
    // }
    // Only proceed if we have all required data
    if let (Some(amount0), Some(amount1), Some(token0), Some(token1)) = (amount0, amount1, token0, token1) {
        let (token_x, token_x_amount) = if amount0 < I256::zero() {
                    (token0, amount0.unsigned_abs().into())
                } else {
                    (token1, amount1.unsigned_abs().into())
                };
        let decoded_swap = crate::mempool_decoder::DecodedSwap {
            tx_hash: H160::zero(), // V3 events may not have tx_hash directly
            pool_address: pool,
            token_x,
            token_x_amount,
            block_number: 0,
            timestamp: chrono::Utc::now().timestamp() as u64,
        };
        let reserve_cache = reserve_cache.clone();
        let token_index = token_index.clone();
        let precomputed_route_cache = precomputed_route_cache.clone();
        let token_tax_map = token_tax_map.clone();
        let config = config.clone();
        let opportunity_tx = opportunity_tx.clone();
        println!("[DecodedSwap V3] {:?}", decoded_swap);
        tokio::spawn(async move {
            if let Some((opportunity, _latency_ms)) =
                find_arbitrage_opportunity_from_price_tracker(
                    &decoded_swap,
                    &reserve_cache,
                    &token_index,
                    &precomputed_route_cache,
                    &token_tax_map,
                    &config,
                )
                .await
            {
                if let Err(e) = opportunity_tx.send(opportunity).await {
                    eprintln!("❌ [V3] Failed to send arbitrage opportunity: {}", e);
                }
            }
        });
    }
}
pub async fn find_arbitrage_opportunity_from_price_tracker(
    decoded_swap: &DecodedSwap,
    reserve_cache: &Arc<ReserveCache>,
    token_index: &Arc<TokenIndexMap>,
    precomputed_route_cache: &Arc<DashMap<u32, Vec<RoutePath>>>,
    token_tax_map: &Arc<TokenTaxMap>,
    config: &Config,
) -> Option<(ArbitrageOpportunity, u128)> {
    // Start latency timer
    let start_time = std::time::Instant::now();
    // Get token index
    let token_x_index = token_index.address_to_index.get(&decoded_swap.token_x)?;
    let token_x_index_u32 = *token_x_index as u32;

    println!(
        "🔍 [Price Tracker] Finding arbitrage for tokenX (idx {}): {:?}",
        token_x_index, decoded_swap.token_x
    );

    // Get all routes that contain this token and the affected pool
    let candidate_routes = precomputed_route_cache
        .get(&token_x_index_u32)
        .map(|entry| entry.value().clone())
        .unwrap_or_default();

    // println!(
    //     "📊 [Price Tracker] Found {} candidate routes for tokenX",
    //     candidate_routes.len()
    // );

    // Filter routes that contain the affected pool
    let filtered_routes: Vec<&RoutePath> = candidate_routes
        .iter()
        .filter(|route| route.pools.contains(&decoded_swap.pool_address))
        .collect();

    println!(
        "🎯 [Price Tracker] {} routes contain the affected pool {:?}",
        filtered_routes.len(),
        decoded_swap.pool_address
    );

    if filtered_routes.is_empty() {
        return None;
    }

    // Simulate all filtered routes in parallel
    let simulation_results: Vec<Option<crate::arbitrage_finder::SimulatedRoute>> = filtered_routes
        .par_iter()
        .map(|route| {
            let (buy_path, sell_path) = match split_route_around_token_x(route, token_x_index_u32) {
                Some(val) => val,
                None => {
                    println!("[DEBUG] split_route_around_token_x failed for route: {:?}", route);
                    return None;
                }
            };
            println!(
                "[DEBUG=========================================================] Simulating route: buy_path={:?}, sell_path={:?}",
                buy_path, sell_path
            );
            let buy_amounts = match simulate_buy_path_amounts_array(
                &buy_path,
                decoded_swap.token_x_amount,
                reserve_cache,
                token_index,
                token_tax_map,
                config,
            ) {
                Some(val) => val,
                None => {
                    println!("[DEBUG] simulate_buy_path_amounts_array failed for buy_path: {:?}", buy_path);
                    return None;
                }
            };
            println!(
                "[DEBUG=========================================================] Buy amounts: {:?}",
                buy_amounts
            );
            let sell_amounts = match simulate_sell_path_amounts_array(
                &sell_path,
                decoded_swap.token_x_amount,
                reserve_cache,
                token_index,
                token_tax_map,
                config,
            ) {
                Some(val) => val,
                None => {
                    println!("[DEBUG] simulate_sell_path_amounts_array failed for sell_path: {:?}", sell_path);
                    return None;
                }
            };
            println!(
                "[DEBUG=========================================================] Sell amounts: {:?}",
                sell_amounts
            );
            let mut merged_amounts = buy_amounts.clone();
            merged_amounts.extend_from_slice(&sell_amounts[1..]);
            println!(
                "[DEBUG=========================================================] Merged amounts: {:?}",
                merged_amounts
            );
            // Calculate profit and profit percentage
            if merged_amounts.len() >= 2 {
                let amount_in: U256 = merged_amounts[0];
                let amount_out: U256 = *merged_amounts.last().unwrap();
                let profit: U256 = amount_out.saturating_sub(amount_in);

                // Only consider profitable trades
                let sell_symbols: Vec<String> = sell_path
                    .hops
                    .iter()
                    .map(|&idx| token_index_to_symbol_from_price_tracker(idx, token_index))
                    .collect();
                let price_usd = {
                    let last_symbol = &sell_symbols[sell_symbols.len() - 1];
                    if let Ok(addr) = last_symbol.parse::<H160>() {
                        get_token_usd_value(&addr).unwrap_or(0.0)
                    } else {
                        0.0
                    }
                };
                let amount = u256_to_f64_lossy(&profit) / 10_f64.powi(18 as i32);
                let profit_usd = amount * price_usd;
                if amount_in < amount_out {
                    // Calculate profit percentage (profit / amount_in * 100)
                    let profit_percentage = if amount_in > U256::zero() {
                        // Convert to f64 for percentage calculation
                        let profit_f64 = profit.as_u128() as f64;
                        let amount_in_f64 = amount_in.as_u128() as f64;
                        (profit_f64 / amount_in_f64) * 100.0
                    } else {
                        0.0
                    };
                    println!(
                        "💰 [Price Tracker] Found profitable route: profit={:.6} USD ({}%), amount_in={}, amount_out={}, price_usd={}",
                        profit_usd, profit_percentage, amount_in, amount_out, price_usd
                    );
                    return Some(crate::arbitrage_finder::SimulatedRoute {
                        merged_amounts,
                        buy_amounts,
                        sell_amounts,
                        buy_symbols: buy_path
                            .hops
                            .iter()
                            .map(|&idx| token_index_to_symbol_from_price_tracker(idx, token_index))
                            .collect(),
                        sell_symbols,
                        buy_pools: buy_path.pools.clone(),
                        sell_pools: sell_path.pools.clone(),
                        profit,
                        profit_percentage,
                        buy_path: buy_path.clone(),
                        sell_path: sell_path.clone(),
                    });
                }
            }
            None
        })
        .collect();

    // Filter out None results
    let profitable_routes: Vec<crate::arbitrage_finder::SimulatedRoute> =
        simulation_results.into_iter().filter_map(|r| r).collect();

    println!(
        "💰 [Price Tracker] Found {} profitable routes",
        profitable_routes.len()
    );

    if profitable_routes.is_empty() {
        return None;
    }

    // Find the most profitable route by percentage (better for multiple base tokens)
    let best_route = profitable_routes
        .iter()
        .max_by(|a, b| {
            a.profit_percentage
                .partial_cmp(&b.profit_percentage)
                .unwrap_or(std::cmp::Ordering::Equal)
        })
        .cloned();

    let estimated_profit = best_route
        .as_ref()
        .map(|r| r.profit)
        .unwrap_or(U256::zero());

    // End latency timer
    let latency = start_time.elapsed().as_millis();

    Some((
        ArbitrageOpportunity {
            decoded_swap: decoded_swap.clone(),
            profitable_routes,
            best_route,
            estimated_profit,
        },
        latency,
    ))
}
fn u256_to_f64_lossy(val: &U256) -> f64 {
    if val.bits() <= 128 {
        val.as_u128() as f64
    } else {
        val.to_string().parse::<f64>().unwrap_or(f64::MAX)
    }
}
const KNOWN_TOKENS: &[(&str, &str, f64)] = &[
    ("0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c", "BNB", 689.93),
    ("0x2170Ed0880ac9A755fd29B2688956BD959F933F8", "ETH", 2961.19),
    (
        "0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c",
        "BTC",
        117970.0,
    ),
    ("0x55d398326f99059fF775485246999027B3197955", "USDT", 1.00),
    ("0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d", "USDC", 1.00), // Multichain bridge price
    ("0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56", "BUSD", 1.00),
    ("0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82", "CAKE", 2.37),
];

fn get_token_usd_value(token_address: &H160) -> Option<f64> {
    let addr_str = format!("0x{:x}", token_address);
    KNOWN_TOKENS
        .iter()
        .find(|(addr, _, _)| addr.to_lowercase() == addr_str.to_lowercase())
        .map(|(_, _, price)| *price)
}
/// Helper to map token index to symbol (price tracker version)
fn token_index_to_symbol_from_price_tracker(idx: u32, token_index: &TokenIndexMap) -> String {
    if let Some(addr) = token_index.index_to_address.get(&(idx as u32)) {
        format!("0x{:x}", addr)
    } else {
        format!("token{}", idx)
    }
}
fn log_opportunity_from_price_tracker(
    opportunity: &ArbitrageOpportunity,
    latency_ms: u128,
    reserve_cache: &crate::cache::ReserveCache,
    old_reserve0: U256,
    old_reserve1: U256,
) {
    use crate::cache::PoolState;
    use ethers::types::U256;
    // Fetch current pool state from reserve_cache
    let (reserve0, reserve1, sqrt_price_x96, liquidity, tick, fee): (
        Option<U256>,
        Option<U256>,
        Option<U256>,
        Option<U256>,
        Option<i32>,
        Option<u32>,
    ) = {
        if let Some(state) = reserve_cache.get(&opportunity.decoded_swap.pool_address) {
            (
                state.reserve0,
                state.reserve1,
                state.sqrt_price_x96,
                state.liquidity,
                state.tick,
                state.fee,
            )
        } else {
            (None, None, None, None, None, None)
        }
    };

    let now: DateTime<Utc> = Utc::now();
    let log_file_path = format!(
        "logs/arbitrage_opportunities_price_tracker_{}.log",
        now.format("%Y%m%d_%H%M%S")
    );

    // Create detailed log entry
    let mut log_entry = json!({
        "source": "price_tracker",
        "timestamp": now.to_rfc3339(),
        "block_number": opportunity.decoded_swap.block_number,
        "pool_address": format!("0x{:x}", opportunity.decoded_swap.pool_address),
        "token_x": format!("0x{:x}", opportunity.decoded_swap.token_x),
        "token_x_amount": opportunity.decoded_swap.token_x_amount.to_string(),
        "estimated_profit": opportunity.estimated_profit.to_string(),
        "profitable_routes_count": opportunity.profitable_routes.len(),
        "latency_ms": latency_ms,
        "reserve0": reserve0.map(|v| v.to_string()),
        "reserve1": reserve1.map(|v| v.to_string()),
        "old_reserve0": old_reserve0.to_string(),
        "old_reserve1": old_reserve1.to_string(),
        "sqrt_price_x96": sqrt_price_x96.map(|v| v.to_string()),
        "liquidity": liquidity.map(|v| v.to_string()),
        "tick": tick,
        "best_route": {
            "merged_amounts": opportunity.best_route.as_ref().map(|r| r.merged_amounts.iter().map(|a| a.to_string()).collect::<Vec<_>>()),
            // "merged_symbols": opportunity.best_route.as_ref().map(|r| r.merged_symbols.clone()),
            // "merged_pools": opportunity.best_route.as_ref().map(|r| r.merged_pools.iter().map(|p| format!("0x{:x}", p)).collect::<Vec<_>>()),
            "profit": opportunity.best_route.as_ref().map(|r| r.profit.to_string()),
            "buy_path_hops": opportunity.best_route.as_ref().map(|r| r.buy_path.hops.clone()),
            "sell_path_hops": opportunity.best_route.as_ref().map(|r| r.sell_path.hops.clone()),
            "buy_amounts": opportunity.best_route.as_ref().map(|r| r.buy_amounts.iter().map(|a| a.to_string()).collect::<Vec<_>>()),
            "sell_amounts": opportunity.best_route.as_ref().map(|r| r.sell_amounts.iter().map(|a| a.to_string()).collect::<Vec<_>>()),
            "profit_percentage": opportunity.best_route.as_ref().map(|r| r.profit_percentage),
            "buy_path_pools": opportunity.best_route.as_ref().map(|r| r.buy_path.pools.iter().map(|p| format!("0x{:x}", p)).collect::<Vec<_>>()),
            "sell_path_pools": opportunity.best_route.as_ref().map(|r| r.sell_path.pools.iter().map(|p| format!("0x{:x}", p)).collect::<Vec<_>>()),
            "buy_symbols": opportunity.best_route.as_ref().map(|r| r.buy_symbols.clone()),
            "sell_symbols": opportunity.best_route.as_ref().map(|r| r.sell_symbols.clone()),
            "buy_pools": opportunity.best_route.as_ref().map(|r| r.buy_pools.iter().map(|p| format!("0x{:x}", p)).collect::<Vec<_>>()),
            "sell_pools": opportunity.best_route.as_ref().map(|r| r.sell_pools.iter().map(|p| format!("0x{:x}", p)).collect::<Vec<_>>()),
            // "sell_test_amounts": opportunity.best_route.as_ref().map(|r| r.sell_test_amounts.iter().map(|a| a.to_string()).collect::<Vec<_>>()),

        }
    });

    // Add pool-wise data as a separate field
    // if let Some(best_route) = &opportunity.best_route {
    //     let mut pools_data = serde_json::Map::new();
    //     for pool_address in &best_route.merged_pools {
    //         let pool_key = format!("0x{:x}", pool_address);
    //         let mut pool_info = serde_json::Map::new();

    //         if let Some(state) = reserve_cache.get(pool_address) {
    //             pool_info.insert("reserve0".to_string(),
    //                 state.reserve0.map(|v| serde_json::Value::String(v.to_string())).unwrap_or(serde_json::Value::Null));
    //             pool_info.insert("reserve1".to_string(),
    //                 state.reserve1.map(|v| serde_json::Value::String(v.to_string())).unwrap_or(serde_json::Value::Null));
    //             pool_info.insert("sqrt_price_x96".to_string(),
    //                 state.sqrt_price_x96.map(|v| serde_json::Value::String(v.to_string())).unwrap_or(serde_json::Value::Null));
    //             pool_info.insert("liquidity".to_string(),
    //                 state.liquidity.map(|v| serde_json::Value::String(v.to_string())).unwrap_or(serde_json::Value::Null));
    //             pool_info.insert("tick".to_string(),
    //                 state.tick.map(|v| serde_json::Value::Number(serde_json::Number::from(v))).unwrap_or(serde_json::Value::Null));
    //             pool_info.insert("fee".to_string(),
    //                 state.fee.map(|v| serde_json::Value::Number(serde_json::Number::from(v))).unwrap_or(serde_json::Value::Null));
    //             pool_info.insert("last_updated".to_string(),
    //                 serde_json::Value::Number(serde_json::Number::from(state.last_updated)));
    //             pool_info.insert("pool_type".to_string(),
    //                 serde_json::Value::String(format!("{:?}", state.pool_type)));
    //         } else {
    //             pool_info.insert("reserve0".to_string(), serde_json::Value::Null);
    //             pool_info.insert("reserve1".to_string(), serde_json::Value::Null);
    //             pool_info.insert("sqrt_price_x96".to_string(), serde_json::Value::Null);
    //             pool_info.insert("liquidity".to_string(), serde_json::Value::Null);
    //             pool_info.insert("tick".to_string(), serde_json::Value::Null);
    //             pool_info.insert("fee".to_string(), serde_json::Value::Null);
    //             pool_info.insert("last_updated".to_string(), serde_json::Value::Null);
    //             pool_info.insert("pool_type".to_string(), serde_json::Value::String("Unknown".to_string()));
    //         }

    //         pools_data.insert(pool_key, serde_json::Value::Object(pool_info));
    //     }

    //     log_entry.as_object_mut().unwrap().insert("merged_pools_data".to_string(), serde_json::Value::Object(pools_data));
    // }

    // Write to log file
    if let Ok(mut file) = OpenOptions::new()
        .create(true)
        .append(true)
        .open(&log_file_path)
    {
        if let Err(e) = writeln!(
            file,
            "{}",
            serde_json::to_string_pretty(&log_entry).unwrap()
        ) {
            eprintln!("❌ [Price Tracker] Failed to write to log file: {}", e);
        }
    } else {
        eprintln!(
            "❌ [Price Tracker] Failed to open log file: {}",
            log_file_path
        );
    }

    // Also print summary to console
    // println!(
    //     "📝 [Price Tracker] Logged opportunity to: {} (latency: {} ms)",
    //     log_file_path, latency_ms
    // );
}
